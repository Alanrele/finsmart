# Azure Deployment Plan for FinSmart Project

## **Goal**
Deploy FinSmart PWA (Progressive Web Application) to Azure Container Apps using Azure Developer CLI (AZD) with full production-ready configuration including email parsing capabilities, Microsoft Graph integration, and MongoDB database.

## **Project Information**

**FinSmart** - Financial Analysis PWA Application
- **Technology Stack**:
  - Frontend: React 18 + Vite + TailwindCSS + PWA capabilities
  - Backend: Node.js + Express.js + Socket.io
  - Authentication: Microsoft MSAL (Azure AD/Entra ID)
  - Database: MongoDB Atlas
  - AI Services: OpenAI GPT-4 integration
  - Cloud Services: Microsoft Graph API, Azure OCR
- **Application Type**: Full-stack financial analysis application with real-time features
- **Key Features**:
  - Email parsing for BCP bank transactions (using cheerio)
  - Microsoft Graph integration for Outlook email access
  - AI-powered financial chat assistant
  - Real-time transaction analysis and categorization
  - PWA with offline capabilities
- **Containerization**: Multi-container setup (frontend + backend)
- **Dependencies**: MongoDB, Microsoft Graph API, OpenAI API, Azure OCR
- **Hosting Recommendation**: Azure Container Apps for scalable, serverless container hosting

## **Azure Resources Architecture**

> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    subgraph "Azure Container Apps Environment"
        ACAE[Container Apps Environment]
        FE[Frontend Container App<br/>React + Vite]
        BE[Backend Container App<br/>Node.js + Express]

        FE --> BE
    end

    subgraph "Azure Supporting Services"
        ACR[Azure Container Registry]
        AI[Application Insights]
        LAW[Log Analytics Workspace]
        KV[Key Vault]
        UAMI[User Assigned Managed Identity]
    end

    subgraph "External Services"
        MONGO[MongoDB Atlas]
        OPENAI[OpenAI API]
        GRAPH[Microsoft Graph API]
        AZURE_OCR[Azure OCR Service]
    end

    ACR --> FE
    ACR --> BE
    BE --> MONGO
    BE --> OPENAI
    BE --> GRAPH
    BE --> AZURE_OCR
    BE --> KV
    FE --> AI
    BE --> AI
    AI --> LAW
    UAMI --> ACR
    UAMI --> KV
```

**Data Flow:**
- Frontend Container App serves the React PWA and communicates with Backend Container App
- Backend Container App handles API requests, authentication, and integrates with external services
- Container images are pulled from Azure Container Registry
- Application logs and metrics flow to Application Insights and Log Analytics Workspace
- Sensitive configuration is stored in Azure Key Vault
- User Assigned Managed Identity provides secure access to Azure resources

## **Recommended Azure Resources**

### Application Hosting
- **Application: finsmart**
  - **Hosting Service Type**: Azure Container Apps
  - **SKU**: Consumption plan (auto-scaling from 0-10 instances)
  - **Configuration**:
    - **Frontend Container**:
      - Language: JavaScript (React)
      - dockerFilePath: `./frontend/Dockerfile`
      - dockerContext: `./frontend`
      - Port: 80
      - Environment Variables:
        - `VITE_API_URL`
        - `VITE_GRAPH_CLIENT_ID`
        - `VITE_GRAPH_TENANT_ID`
    - **Backend Container**:
      - Language: Node.js 18
      - dockerFilePath: `./backend/Dockerfile`
      - dockerContext: `./backend`
      - Port: 5000
      - Environment Variables:
        - `MONGODB_URI`
        - `JWT_SECRET`
        - `JWT_REFRESH_SECRET`
        - `OPENAI_API_KEY`
        - `GRAPH_CLIENT_ID`
        - `GRAPH_CLIENT_SECRET`
        - `GRAPH_TENANT_ID`
        - `AZURE_OCR_ENDPOINT`
        - `AZURE_OCR_KEY`
        - `FRONTEND_URL`
        - `PORT`
        - `NODE_ENV`

### Dependencies Resources
- **MongoDB Atlas**
  - **Service Type**: External (SaaS)
  - **Connection Type**: Connection string via Key Vault
  - **Environment Variables**: `MONGODB_URI`

- **OpenAI API**
  - **Service Type**: External (SaaS)
  - **Connection Type**: API Key via Key Vault
  - **Environment Variables**: `OPENAI_API_KEY`

- **Microsoft Graph API**
  - **Service Type**: Azure AD/Entra ID
  - **Connection Type**: Client credentials
  - **Environment Variables**: `GRAPH_CLIENT_ID`, `GRAPH_CLIENT_SECRET`, `GRAPH_TENANT_ID`

- **Azure OCR Service**
  - **Service Type**: Azure Cognitive Services
  - **SKU**: Standard S1
  - **Connection Type**: API Key + Endpoint via Key Vault
  - **Environment Variables**: `AZURE_OCR_ENDPOINT`, `AZURE_OCR_KEY`

### Recommended Supporting Services
- **Application Insights**
  - **Purpose**: Application monitoring and telemetry
  - **Configuration**: Connected to both frontend and backend containers

- **Log Analytics Workspace**
  - **Purpose**: Centralized logging for all Container Apps
  - **Configuration**: Set all app services to connect to this workspace

- **Key Vault**
  - **Purpose**: Secure storage for connection strings and API keys
  - **Secrets**:
    - `mongodb-uri`
    - `openai-api-key`
    - `jwt-secret`
    - `jwt-refresh-secret`
    - `graph-client-secret`
    - `azure-ocr-key`

- **Container Registry**
  - **Purpose**: Store Docker images for Container Apps
  - **SKU**: Basic
  - **Configuration**: Private registry with managed identity access

### Recommended Security Configurations

**Container Apps Security:**
- **User Managed Identity**: Must be assigned to both container apps
- **AcrPull Role Assignment**: User managed identity must have **AcrPull** role (`7f951dda-4ed3-4680-a7ca-43fe172d538d`) assigned to the container registry
- **Key Vault Access Policy**: User managed identity must have **Key Vault Secrets User** role for secret access

**Network Security:**
- **HTTPS Only**: Enforce HTTPS for all external traffic
- **Container Apps Environment**: Internal networking between frontend and backend
- **CORS Configuration**: Properly configured for production domains

## **Execution Steps**

> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**

### 1. Provision Azure Infrastructure And Deploy the Application:

1. **Prepare Production Environment Configuration**
   - Create production `.env` files for both frontend and backend
   - Configure Docker files for production builds
   - Set up proper CORS and security configurations

2. **Generate Infrastructure as Code (IaC)**
   - Get IaC rules from the tool `iac-rules-get`
   - Generate Bicep files for required Azure resources based on the plan
   - Create main.bicep, container-apps.bicep, and supporting-services.bicep

3. **Pre-deployment Validation**
   - Use `get_errors` tool to check generated Bicep grammar errors
   - Fix any syntax or configuration errors
   - Validate resource names and SKUs

4. **Deploy Infrastructure**
   - Run AZD command `azd up` to provision resources and deploy applications
   - Confirm each resource is created or already exists
   - Configure managed identity and role assignments

5. **Post-deployment Verification**
   - Check deployment output to ensure resources are provisioned successfully
   - Verify container apps are running and healthy
   - Test application endpoints and functionality

6. **Application Health Check**
   - Check application logs with tool `azd-app-log-get`
   - Ensure all services are running properly
   - Validate email parsing functionality
   - Test Microsoft Graph integration

### 2. Summary and Documentation:

1. **Create Deployment Summary**
   - Summarize deployment results and save to `.azure/summary.copilotmd`
   - List all deployment files and their descriptions
   - Include architecture diagram of provisioned Azure resources
   - Document production URLs and access information

2. **Production Configuration Documentation**
   - Document environment variables and their sources
   - Create troubleshooting guide for common issues
   - Provide monitoring and maintenance procedures
